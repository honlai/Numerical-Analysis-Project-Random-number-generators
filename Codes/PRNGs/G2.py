import matplotlib.pyplot as plt
import time

def get_seed():
    t = time.time()
    t-=int(t)
    t*=(10**16)
    seed = int(t)
    return seed

#CustomPRNG2 base on MRG32k3a
class CustomPRNG2():
    def __init__(self,seed=0):
        self.__seed=seed
        self.__x1=0
        self.__x2=0
        self.__x3=0
        self.__x4=0
        self.__index=1
        self.__components=4
        self.__rn=0

        #here we use parameters of MRG32k3a,MRG32k5a
        self.__m1 = 4294967087.0
        self.__a12 = 1403580.0
        self.__a13 = -810728.0
        self.__s10 = ((self.__seed+0b1111)%self.__m1)
        self.__s11 = ((self.__seed+0b11111)%self.__m1)
        self.__s12 = ((self.__seed+0b111111)%self.__m1)

        self.__m2 = 4294949027.0
        self.__a22 = 1154721.0
        self.__a24 = 1739991.0
        self.__a25 = -1108499.0
        self.__s20 = ((self.__seed+0b1111)%self.__m2)
        self.__s21 = ((self.__seed+0b11111)%self.__m2)
        self.__s22 = ((self.__seed+0b111111)%self.__m2)
        self.__s23 = ((self.__seed+0b1111111)%self.__m2)
        self.__s24 = ((self.__seed+0b11111111)%self.__m2)

        self.__m3 = 4294944443.0
        self.__a31 = 527612.0
        self.__a33 = -1370589.0
        self.__s30 = ((self.__seed+0b1111)%self.__m3)
        self.__s31 = ((self.__seed+0b11111)%self.__m3)
        self.__s32 = ((self.__seed+0b111111)%self.__m3)

        self.__m4 = 4294934327.0
        self.__a41 = 1776413.0
        self.__a43 = 865203.0
        self.__a45 = -1641052.0
        self.__s40 = ((self.__seed+0b1111)%self.__m4)
        self.__s41 = ((self.__seed+0b11111)%self.__m4)
        self.__s42 = ((self.__seed+0b111111)%self.__m4)
        self.__s43 = ((self.__seed+0b1111111)%self.__m4)
        self.__s44 = ((self.__seed+0b11111111)%self.__m4)
        
    # Component 1
    def Component1(self):
        #linear recurrence equation
        p1 = (self.__a12 * self.__s11)%self.__m1 \
                + (self.__a13 * self.__s10)%self.__m1
        p1 %=self.__m1
        if (p1 < 0.0):
            p1 += self.__m1

        self.__s10 = self.__s11
        self.__s11 = self.__s12
        #here we use number generated by Component4
        self.__s12 = (self.__x4%self.__m1)
        #here we give number to Component2
        self.__x1=p1
        self.__rn=self.__x1 / self.__m1
        return 
    
    # Component 2
    def Component2(self):
        #linear recurrence equation
        p2 = (self.__a22 * self.__s23)%self.__m2 \
                + (self.__a24 * self.__s21)%self.__m2 \
                + (self.__a25 * self.__s20)%self.__m2
                
        p2 %=self.__m2
        if (p2 < 0.0):
            p2 += self.__m2

        self.__s20 = self.__s21
        self.__s21 = self.__s22
        self.__s22 = self.__s23
        self.__s23 = self.__s24
        #here we use number generated by Component2
        self.__s24 = (self.__x1%self.__m2)
        #here we give number to Component4
        self.__x2=p2
        self.__rn=self.__x2 / self.__m2
        return 

    # Component 3
    def Component3(self):
        #linear recurrence equation
        p3 = (self.__a31 * self.__s32)%self.__m3 \
                + (self.__a33 * self.__s30)%self.__m3
        p3 %=self.__m3
        if (p3 < 0.0):
            p3 += self.__m3

        self.__s30 = self.__s31
        self.__s31 = self.__s32
        #here we use number generated by Component1
        self.__s32 = (self.__x2%self.__m3)
        #here we give number to Component3
        self.__x3=p3
        self.__rn=self.__x3 / self.__m3
        return 

    # Component 4
    def Component4(self):
        #linear recurrence equation
        p4 = (self.__a41 * self.__s44)%self.__m4 \
                + (self.__a43 * self.__s42)%self.__m4 \
                + (self.__a45 * self.__s40)%self.__m4 
                
        p4 %=self.__m4
        if (p4 < 0.0):
            p4 += self.__m4

        self.__s40 = self.__s41
        self.__s41 = self.__s42
        self.__s42 = self.__s43
        self.__s43 = self.__s44
        #here we use number generated by Component3
        self.__s44 = (self.__x3%self.__m4)
        #here we give number to Component1
        self.__x4=p4
        self.__rn=self.__x4 / self.__m4
        return 
    
    #compute next random number
    def next_rnd(self):
        if self.__index==1:
            self.Component1()
        if self.__index==2:
            self.Component2()
        if self.__index==3:
            self.Component3()
        if self.__index==0:
            self.Component4()
        self.__index+=1
        self.__index%=self.__components
        return 
    
    #get next random number (between 0 and 1)
    def random(self):
        self.next_rnd()
        return self.__rn
    
    #get random number between low and high
    def rnd_in_I(self,low=1, high=10):
        self.next_rnd()
        return  self.__rn*(high-low)+low

if __name__ == "__main__":
    Nmax=100000
    L=[]
    sd = get_seed()
    custom_rng = CustomPRNG2(seed=sd)
    for i in range(Nmax):
        rnd=custom_rng.random()
        L.append(rnd)
        #print(rnd)   
        #print(custom_rng.random())       
        #print(custom_rng.rnd_in_I(1, 10)) 
    
    
    plt.hist(L, bins=512, range=(0, 1),color="royalblue")
    plt.savefig((f'G2_g{Nmax}.png'))
    plt.show()
    
    